# .github/workflows/terraform-cicd.yml
name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - validate
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.2'
  AWS_REGION: 'us-east-1'
  TF_CLOUD_ORGANIZATION: 'brijeshorg'
  TF_WORKSPACE: 'brijeshworkspace'

jobs:
  terraform-setup:
    name: Terraform Setup
    runs-on: ubuntu-latest
    outputs:
      workspace: ${{ steps.setup.outputs.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        env:
          TF_WORKSPACE: ${{ env.TF_WORKSPACE }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID length: ${#AWS_ACCESS_KEY_ID}"
          echo "AWS_SECRET_ACCESS_KEY length: ${#AWS_SECRET_ACCESS_KEY}"
          aws sts get-caller-identity
          aws ec2 describe-regions --region $AWS_REGION

      - name: Terraform Init
        run: |
          terraform init
          echo "TF_WORKSPACE=$(terraform workspace show)" >> $GITHUB_OUTPUT

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    needs: terraform-setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      #- name: Terraform Format Check
      #  run: terraform fmt -check -recursive -diff

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-setup, terraform-validate]
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'push' ||
      github.event.inputs.action == 'plan'
    outputs:
      plan-output: ${{ steps.plan.outputs.stdout }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID length: ${#AWS_ACCESS_KEY_ID}"
          echo "AWS_SECRET_ACCESS_KEY length: ${#AWS_SECRET_ACCESS_KEY}"
          aws sts get-caller-identity
          aws ec2 describe-regions --region $AWS_REGION

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          set -o pipefail
          # Sanitize output by replacing :: with -- and removing control chars
          terraform plan \
            -var="tfc_aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="tfc_aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -no-color -detailed-exitcode -out=tfplan 2>&1 | \
            sed -e 's/^::/--/g' -e 's/\x1b\[[0-9;]*m//g' | tee plan-output.txt
          
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          
          # Base64 encode the output to safely store in GITHUB_OUTPUT
          echo "plan-output=$(base64 -w0 plan-output.txt)" >> $GITHUB_OUTPUT
          
          if [ $PLAN_EXIT_CODE -eq 1 ]; then
            echo "::error::Terraform plan failed"
            exit 1
          elif [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "::warning::Terraform plan has changes"
            exit 0
          else
            echo "No changes detected"
            exit 0
          fi

      - name: Upload Plan Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.run_id }}
          path: |
            tfplan
            plan-output.txt



      - name: Comment PR with Plan
        
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const plan = fs.readFileSync('plan-output.txt', 'utf8');
              const maxGitHubBodyCharacters = 65536;
              
              function chunkSubstr(str, size) {
                const numChunks = Math.ceil(str.length / size);
                const chunks = new Array(numChunks);
                for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                  chunks[i] = str.substr(o, size);
                }
                return chunks;
              }
              
              const planChunks = chunkSubstr(plan, maxGitHubBodyCharacters);
              
              for (let i = 0; i < planChunks.length; i++) {
                const body = `## Terraform Plan Output (Part ${i + 1}/${planChunks.length})
                
                \`\`\`terraform
                ${planChunks[i]}
                \`\`\`
                `;
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            } catch (error) {
              console.error('Error creating plan comment:', error);
              core.setFailed('Failed to create plan comment');
            }

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'pull_request') ||
      github.event.inputs.action == 'apply'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ needs.terraform-plan.outputs.run_id }}

      - name: Terraform Apply
        run: |
          set -x
          terraform apply -auto-approve tfplan

      - name: Terraform Output
        run: terraform output -json > outputs.json

      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: outputs.json

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: |
          set -x
          terraform destroy -auto-approve
